// Generated by CoffeeScript 1.3.3
(function() {
  var pop;

  pop = PopTags;

  describe("PopTags", function() {
    describe("When rendering a plain text without tags", function() {
      return it("should display the template", function() {
        var template;
        template = "I am a plain text";
        return expect(new pop.Template({
          template: template
        }).render({})).toEqual("I am a plain text");
      });
    });
    describe("a tag", function() {
      beforeEach(function() {
        return this.template = "<h1>Home - <pop:site_title /></h1>";
      });
      describe("with an empty scope", function() {
        beforeEach(function() {
          return this.content = {};
        });
        return it("should render nothing", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h1>Home - </h1>");
        });
      });
      return describe("with the variable in the scope", function() {
        beforeEach(function() {
          return this.content = {
            site_title: "Webpop"
          };
        });
        return it("should replace the tag with the value of the variable", function() {
          return expect(new pop.Template({
            template: this.template
          }).render({
            site_title: "Webpop"
          })).toEqual("<h1>Home - Webpop</h1>");
        });
      });
    });
    describe("a tag with a nested tag", function() {
      beforeEach(function() {
        return this.template = "<pop:content><li><pop:title /></li></pop:content>";
      });
      describe("with an array in the scope and variable inside", function() {
        beforeEach(function() {
          return this.content = {
            content: [
              {
                title: "Hello"
              }, {
                title: "World"
              }
            ]
          };
        });
        return it("should repeat the enclosed tag and perform the substitution for each element", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<li>Hello</li><li>World</li>");
        });
      });
      return describe("with a function returning an array", function() {
        beforeEach(function() {
          return this.content = {
            content: function() {
              return [
                {
                  title: "Hello"
                }, {
                  title: "World"
                }
              ];
            }
          };
        });
        it("should repeat the enclosed tags and perform the substitution for each element", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<li>Hello</li><li>World</li>");
        });
        it("should handle first and last", function() {
          return expect(new pop.Template({
            template: "<pop:content break='li'><pop:first>First</pop:first><pop:last>Last</pop:last> <pop:title/></pop:content>"
          }).render(this.content)).toEqual("<li>First Hello</li><li>Last World</li>");
        });
        it("should handle first and last when the array elements are functions", function() {
          this.content = {
            content: function() {
              return [
                {
                  title: "Hello"
                }, {
                  title: "World"
                }
              ];
            }
          };
          return expect(new pop.Template({
            template: "<pop:content break='li'><pop:first>First</pop:first><pop:last>Last</pop:last> <pop:title/></pop:content>"
          }).render(this.content)).toEqual("<li>First Hello</li><li>Last World</li>");
        });
        return it("should handle odd and even", function() {
          this.content = {
            entries: [
              {
                title: "First"
              }, {
                title: "Second"
              }, {
                title: "Third"
              }
            ]
          };
          return expect(new pop.Template({
            template: "<pop:entries break=', '><pop:title/> - <pop:odd>Odd</pop:odd><pop:even>Even</pop:even></pop:entries>"
          }).render(this.content)).toEqual("First - Odd, Second - Even, Third - Odd");
        });
      });
    });
    describe("with an array of strings", function() {
      beforeEach(function() {
        return this.content = {
          titles: ["Hello", "World"]
        };
      });
      describe("when rendered with no enclosed tags", function() {
        beforeEach(function() {
          return this.template = '<pop:titles break=", "/>';
        });
        it("should render the strings", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("Hello, World");
        });
        it("should handle just one string", function() {
          return expect(new pop.Template({
            template: this.template
          }).render({
            titles: ["Hello"]
          })).toEqual("Hello");
        });
        it("should handle first and last", function() {
          return expect(new pop.Template({
            template: '<pop:titles break=", "><pop:first>First</pop:first><pop:last>Last</pop:last> <pop:value/></pop:titles>'
          }).render(this.content)).toEqual("First Hello, Last World");
        });
        return it("should not have first and last outside the collection", function() {
          return expect(new pop.Template({
            template: '<pop:titles break=", "/><pop:first>First</pop:first><pop:last>Last</pop:last>'
          }).render(this.content)).toEqual("Hello, World");
        });
      });
      describe("when rendering nested array and pop:first tags", function() {
        beforeEach(function() {
          this.template = '<pop:outer><pop:inner><pop:title/></pop:inner>, <pop:first><pop:title/></pop:first></pop:outer>';
          return this.nested = {
            outer: [
              {
                title: "World",
                inner: [
                  {
                    title: "Hello"
                  }
                ]
              }
            ]
          };
        });
        return it("should render the strings", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.nested)).toEqual("Hello, World");
        });
      });
      describe("when rendered with enclosed tags", function() {
        beforeEach(function() {
          return this.template = '<pop:titles><h2><pop:value /></h2></pop:titles>';
        });
        return it("should render the enclosed tags for each string with the string available as value in the scope", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h2>Hello</h2><h2>World</h2>");
        });
      });
      describe("when rendered with the repeat=false option", function() {
        beforeEach(function() {
          return this.template = '<pop:titles repeat="false"><h2><pop:values break=", " /></h2></pop:titles>';
        });
        it("should only render the enclosed tags once and pass the array to the values variable", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h2>Hello, World</h2>");
        });
        return it("should still respect the no_ tag", function() {
          var content, template;
          content = {
            titles: []
          };
          template = "<pop:titles repeat='false'>Something</pop:titles><pop:no_titles>Hello, World</pop:no_titles>";
          return expect(new pop.Template({
            template: template
          }).render(content)).toEqual("Hello, World");
        });
      });
      describe("when using no repeat and skip", function() {
        beforeEach(function() {
          return this.template = '<pop:titles repeat="false"><pop:values skip="1"><h2><pop:value /></h2></pop:values></pop:titles>';
        });
        return it("should only render the enclosed tags once and pass the array to the values variable", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h2>World</h2>");
        });
      });
      describe("when using no repeat and limit", function() {
        beforeEach(function() {
          return this.template = '<pop:titles repeat="false"><pop:values limit="1"><h2><pop:value /></h2></pop:values></pop:titles>';
        });
        return it("should only render the enclosed tags once and pass the array to the values variable", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h2>Hello</h2>");
        });
      });
      return describe("when using no repeat and skip and limit", function() {
        beforeEach(function() {
          return this.template = '<pop:titles repeat="false"><pop:values skip="1" limit="1"><h2><pop:value /></h2></pop:values></pop:titles>';
        });
        return it("should only render the enclosed tags once and pass the array to the values variable", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<h2>World</h2>");
        });
      });
    });
    describe("with a function returning an array of more complex objects", function() {
      beforeEach(function() {
        this.template = '<pop:entries wrap="ul" break="li"><pop:content><h4><pop:title /></h4></pop:content></pop:entries>';
        return this.content = {
          entries: function() {
            return [
              {
                "content": {
                  "title": "Raspberry Stripe"
                }
              }, {
                "content": {
                  "title": "Denim Blue"
                }
              }, {
                "content": {
                  "title": "Cotton Candy"
                }
              }
            ];
          }
        };
      });
      return it("should render the enclosed tags for each object", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content)).toEqual("<ul><li><h4>Raspberry Stripe</h4></li><li><h4>Denim Blue</h4></li><li><h4>Cotton Candy</h4></li></ul>");
      });
    });
    describe("When rendering a template refering to content from an extension", function() {
      beforeEach(function() {
        var sample_extension;
        this.template = "<title><pop:sample_extension:title /></title>";
        sample_extension = {
          title: "Hello From Sample Extension"
        };
        return this.require = function(name) {
          if (name === 'sample_extension') {
            return sample_extension;
          }
        };
      });
      it("should require the extension and get the content from there", function() {
        return expect(new pop.Template({
          template: this.template,
          require: this.require
        }).render({})).toEqual("<title>Hello From Sample Extension</title>");
      });
      return describe("with a no tag", function() {
        beforeEach(function() {
          this.template = "<title><pop:ext:title>Hello</pop:ext:title><pop:ext:no_title>No title</pop:ext:no_title></title>";
          return this.require = function(name) {
            if (name === 'ext') {
              return {
                title: null
              };
            }
          };
        });
        it("should render the no tag when", function() {
          return expect(new pop.Template({
            template: this.template,
            require: this.require
          }).render({})).toEqual("<title>No title</title>");
        });
        return it("should handle wrap and class on a no tag", function() {
          this.template = "<pop:ext:title>Hello</pop:ext:title><pop:ext:no_title wrap='p' class='none'>No title</pop:ext:no_title>";
          return expect(new pop.Template({
            template: this.template,
            require: this.require
          }).render({})).toEqual("<p class=\"none\">No title</p>");
        });
      });
    });
    describe("When rendering tags within a tag that changes the scope to that of an extension", function() {
      beforeEach(function() {
        var ext;
        this.template = "<title><pop:ext:post><pop:title /></pop:ext:post></title>";
        ext = {
          post: function() {
            return {
              title: 'Hello'
            };
          }
        };
        return this.require = function(name) {
          if (name === 'ext') {
            return ext;
          }
        };
      });
      return it("should use the content from the extension", function() {
        return expect(new pop.Template({
          template: this.template,
          require: this.require
        }).render({})).toEqual("<title>Hello</title>");
      });
    });
    describe("When rendering a template that passes options to a tag", function() {
      beforeEach(function() {
        return this.content = {
          posts: function(options) {
            var i, _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = options.limit; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              _results.push({
                id: i + 1
              });
            }
            return _results;
          }
        };
      });
      describe("when double-quoting the option", function() {
        beforeEach(function() {
          return this.template = "<pop:posts limit=\"3\"><li><pop:id /></li></pop:posts>";
        });
        return it("should pass the options to the tag", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<li>1</li><li>2</li><li>3</li>");
        });
      });
      describe("when single-quoting the option", function() {
        beforeEach(function() {
          return this.template = "<pop:posts limit='3'><li><pop:id /></li></pop:posts>";
        });
        return it("should pass the options to the tag", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<li>1</li><li>2</li><li>3</li>");
        });
      });
      describe("when passing an extension method as the option", function() {
        beforeEach(function() {
          var sample_extension;
          sample_extension = {
            limit: function() {
              return 3;
            }
          };
          this.require = function(name) {
            if (name === 'sample_extension') {
              return sample_extension;
            }
          };
          return this.template = "<pop:posts limit='<pop:sample_extension:limit/>'><li><pop:id /></li></pop:posts>";
        });
        return it("should call the function and pass the result to the tag", function() {
          return expect(new pop.Template({
            template: this.template,
            require: this.require
          }).render(this.content)).toEqual("<li>1</li><li>2</li><li>3</li>");
        });
      });
      return describe("when passing an extension method as the option to a tag with a html function", function() {
        beforeEach(function() {
          var sample_extension;
          sample_extension = {
            name: function() {
              return "World!";
            }
          };
          this.require = function(name) {
            if (name === 'sample_extension') {
              return sample_extension;
            }
          };
          this.content = {
            greet: {
              html: function(options) {
                return "Hello, " + options.name;
              }
            }
          };
          return this.template = "<pop:greet name='<pop:sample_extension:name/>'/>";
        });
        return it("should call the function and pass the result to the tag", function() {
          return expect(new pop.Template({
            template: this.template,
            require: this.require
          }).render(this.content)).toEqual("Hello, World!");
        });
      });
    });
    describe("When rendering a template with default content", function() {
      beforeEach(function() {
        return this.template = "<pop:something><pop:title default=\"Hello\" /></pop:something>" + "<pop:no_something>No Content</pop:no_something>";
      });
      describe("with no content", function() {
        beforeEach(function() {
          return this.content = {};
        });
        return it("should render the no_content tag", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content).trim()).toEqual("No Content");
        });
      });
      describe("with content but no value for the tag", function() {
        beforeEach(function() {
          return this.content = {
            something: {}
          };
        });
        return it("should render the value of the 'default' attribute", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content).trim()).toEqual("Hello");
        });
      });
      describe("when the tempate has a pop tag in the default attribute", function() {
        beforeEach(function() {
          this.tempate = "<pop:something default='<pop:something_else />'/>";
          return this.content = {
            something_else: "Hello"
          };
        });
        return it("should render the result of evaluating the pop tag", function() {
          return expect(new pop.Template({
            template: this.tempate
          }).render(this.content).trim()).toEqual("Hello");
        });
      });
      return describe("when the layout is chosen by an pop tag", function() {
        beforeEach(function() {
          var _this = this;
          this.layout = "<h1><pop:region name='main'/></h1>";
          this.template = "<pop:layout name='<pop:the_layout/>'/><pop:block region='main'>Hello</pop:block>";
          this.content = {
            the_layout: "layout"
          };
          return this.read = function(name) {
            if (name === 'layouts/layout') {
              return _this.layout;
            }
          };
        });
        return it("should render the right layout", function() {
          return expect(new pop.Template({
            template: this.template,
            read: this.read
          }).render(this.content).trim()).toEqual("<h1>Hello</h1>");
        });
      });
    });
    describe("when a region uses wrap and class", function() {
      beforeEach(function() {
        var _this = this;
        this.layout = "<pop:region name='main' wrap='div' class='main'/>";
        this.template = "<pop:layout name='<pop:the_layout/>'/><pop:block region='main'>Hello</pop:block>";
        this.content = {
          the_layout: "layout"
        };
        return this.read = function(name) {
          if (name === 'layouts/layout') {
            return _this.layout;
          }
        };
      });
      return it("should render the right layout", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual('<div class="main">Hello</div>');
      });
    });
    describe("with a no_ tag and an include inside", function() {
      beforeEach(function() {
        var _this = this;
        this.template = "<pop:layout name='outer' /><pop:block region='main'><pop:content><pop:test>Test: <pop:include template='inner' /></pop:test><pop:no_test><pop:include template='inner' /></pop:no_test></pop:content></pop:block>";
        this.outer = "<pop:region name='main' />";
        this.inner = "<h1><pop:title /></h1>";
        this.content = {
          content: {
            title: "Hello",
            test: []
          }
        };
        return this.read = function(name) {
          if (name === 'inner') {
            return _this.inner;
          }
          if (name === 'layouts/outer') {
            return _this.outer;
          }
        };
      });
      return it("should render the result of evaluating the pop tag", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual("<h1>Hello</h1>");
      });
    });
    describe("no content tag inside a collection", function() {
      beforeEach(function() {
        return this.template = "<pop:something><pop:title /><pop:no_title>No Title </pop:no_title></pop:something>";
      });
      return describe("where some has the content and some doesn't", function() {
        beforeEach(function() {
          return this.content = {
            something: [
              {}, {
                title: "Yes Title"
              }
            ]
          };
        });
        return it("should render the no_content tag", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content).trim()).toEqual("No Title Yes Title");
        });
      });
    });
    describe("using lookup on the scope in a tag", function() {
      beforeEach(function() {
        this.template = "<pop:content><pop:something><pop:t name='title'/></pop:something></pop:content>";
        return this.content = {
          content: {
            title: "Hello, World"
          },
          something: {
            testing: "Testing"
          },
          t: function(options, enclosed, scope) {
            return scope.lookup(options.name);
          }
        };
      });
      return it("should crawl up the scope chain", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("Hello, World");
      });
    });
    describe("When rendering a template with a filter", function() {
      beforeEach(function() {
        this.template = "<pop:upcase>hello world</pop:upcase>";
        return this.content = {
          upcase: function(options, enclosing) {
            return enclosing.render().toUpperCase();
          }
        };
      });
      return it("should call the filter with the enclosed text", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("HELLO WORLD");
      });
    });
    describe("When rendering a template with a filtered text and substitution", function() {
      beforeEach(function() {
        this.template = "<pop:upcase><pop:title /></pop:upcase>";
        return this.content = {
          upcase: function(options, enclosing) {
            return enclosing.render().toUpperCase();
          },
          title: "Hello world"
        };
      });
      return it("should let the filter render the enclosed tags and replace them with the result", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("HELLO WORLD");
      });
    });
    describe("a tag with a wrap attribute", function() {
      beforeEach(function() {
        this.template = '<pop:title wrap="span" />';
        return this.content = {
          title: 'I should be wrapped in a span'
        };
      });
      return it("should wrap the content in the element specified in the attribute", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("<span>I should be wrapped in a span</span>");
      });
    });
    describe("a tag with with a wrap and a class attribute", function() {
      beforeEach(function() {
        this.template = '<pop:title wrap="span" class="title"/>';
        return this.content = {
          title: 'I should be wrapped in a span'
        };
      });
      return it("should add the class to the wrap element", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("<span class=\"title\">I should be wrapped in a span</span>");
      });
    });
    describe("a tag with a wrap attribute for an empty element", function() {
      beforeEach(function() {
        this.template = '<pop:title wrap="span" class="title"/>';
        return this.content = {};
      });
      it("should not add the wrap element", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
      it("should not add the wrap element when the value is an empty array", function() {
        this.content.title = [];
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
      it("should work with repeat false", function() {
        var template;
        this.content.title = [];
        template = '<pop:title wrap="span" class="title" repeat="false" />';
        return expect(new pop.Template({
          template: template
        }).render(this.content).trim()).toEqual("");
      });
      return it("should work with a function returning an empty array", function() {
        this.content.title = function() {
          return [];
        };
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag with wrap and break attributes", function() {
      beforeEach(function() {
        this.template = '<pop:posts wrap="ul" break="li"><pop:title /></pop:posts>';
        return this.content = {
          posts: [
            {
              title: 'post 1'
            }, {
              title: 'post 2'
            }
          ]
        };
      });
      return it("should wrap the content in the wrap element and wrap each repetition in the break element", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("<ul><li>post 1</li><li>post 2</li></ul>");
      });
    });
    describe("a tag with a break attribute that is not an html tag", function() {
      beforeEach(function() {
        this.template = '<pop:posts break=", "><pop:title /></pop:posts>';
        return this.content = {
          posts: [
            {
              title: 'post 1'
            }, {
              title: 'post 2'
            }, {
              title: 'post 3'
            }
          ]
        };
      });
      it("should separate each repetition with the value of the break attribute", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("post 1, post 2, post 3");
      });
      return describe("and a last attribute", function() {
        beforeEach(function() {
          return this.template = '<pop:posts break=", " last=" and "><pop:title /></pop:posts>';
        });
        return it("should separate each repetition with the value of the break attribute and the last 2 with the value of the last attribute", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content).trim()).toEqual("post 1, post 2 and post 3");
        });
      });
    });
    describe("a tag with a break attribute that is an html5 self-closing tag", function() {
      beforeEach(function() {
        this.template = '<pop:posts break="br"><pop:title /></pop:posts>';
        return this.content = {
          posts: [
            {
              title: 'post 1'
            }, {
              title: 'post 2'
            }
          ]
        };
      });
      return it("should separate each repetition with the value of the break attribute", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("post 1<br />post 2");
      });
    });
    describe("opening up a tag for a string", function() {
      return it("should separate the string into lines for the pop:lines tag", function() {
        return expect(new pop.Template({
          template: "<pop:text><ul><pop:lines break='li'/></ul></pop:text>"
        }).render({
          text: "First\nSecond\nThird"
        }).trim()).toEqual("<ul><li>First</li><li>Second</li><li>Third</li></ul>");
      });
    });
    describe("a self-closing tag for a boolean element that is true", function() {
      beforeEach(function() {
        this.template = '<pop:readmore />';
        return this.content = {
          readmore: true
        };
      });
      return it("should render the string 'true'", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("true");
      });
    });
    describe("a self-closing tag for a boolean element that is false", function() {
      beforeEach(function() {
        this.template = '<pop:readmore />';
        return this.content = {
          readmore: false
        };
      });
      return it("should render the string 'false'", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("false");
      });
    });
    describe("a tag for a boolean element that is true and has enclosed content", function() {
      beforeEach(function() {
        this.template = '<pop:readmore>You can read more</pop:readmore>';
        return this.content = {
          readmore: true
        };
      });
      return it("should render the enclosed content", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("You can read more");
      });
    });
    describe("a tag for a boolean element that is false and has enclosed content", function() {
      beforeEach(function() {
        this.template = '<pop:readmore>You can read more</pop:readmore>';
        return this.content = {
          readmore: false
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag for a boolean element that is false and has default content", function() {
      beforeEach(function() {
        this.template = '<pop:readmore default="You cannot read more">You can read more</pop:readmore>';
        return this.content = {
          readmore: false
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("You cannot read more");
      });
    });
    describe("a tag for a string element that is enclosing other tags", function() {
      beforeEach(function() {
        this.template = '<pop:title>Title: <pop:title /></pop:title>';
        return this.content = {
          title: 'Hello, World!'
        };
      });
      return it("should render the enclosed content", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("Title: Hello, World!");
      });
    });
    describe("a tag for a non-existing element that is enclosing other tags", function() {
      beforeEach(function() {
        this.template = '<pop:title>Title: <pop:title /></pop:title>';
        return this.content = {};
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag for an undefined element", function() {
      beforeEach(function() {
        var title;
        this.template = '<pop:title />';
        title = void 0;
        return this.content = {
          title: title
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag with an undefined html value and a bad toString method", function() {
      beforeEach(function() {
        var title;
        this.template = '<pop:title />';
        title = void 0;
        return this.content = {
          title: {
            html: title,
            toString: function() {
              return title;
            }
          }
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag with an empty html value", function() {
      beforeEach(function() {
        this.template = '<pop:title />';
        return this.content = {
          title: {
            html: null
          }
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("");
      });
    });
    describe("a tag for an undefined element that is exists further up in the scope", function() {
      beforeEach(function() {
        var Content;
        this.template = '<pop:content>Title: <pop:title /></pop:content>';
        Content = function() {};
        Content.prototype.title = function() {};
        return this.content = {
          title: "Hello, World",
          content: new Content
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("Title:");
      });
    });
    describe("a tag for an non existing element that is exists further up in the scoe", function() {
      beforeEach(function() {
        var Content;
        this.template = '<pop:content>Title: <pop:title /></pop:content>';
        Content = function() {};
        return this.content = {
          title: "Hello, World",
          content: new Content
        };
      });
      return it("should render nothing", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("Title: Hello, World");
      });
    });
    describe("a self-closing tag for an object with an html function", function() {
      beforeEach(function() {
        this.template = 'Read more: <pop:link text="here" />';
        return this.content = {
          link: {
            html: function(options) {
              return "<a href='/slug'>" + options.text + "</a>";
            }
          }
        };
      });
      return it("should render the result of calling the html function", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content).trim()).toEqual("Read more: <a href='/slug'>here</a>");
      });
    });
    describe("an include tag", function() {
      beforeEach(function() {
        this.template = '<div><pop:include template="hello-world" /></div>';
        this.read = function(name) {
          if (name === 'hello-world') {
            return "Hello <pop:title />";
          } else {
            return null;
          }
        };
        return this.content = {
          title: 'World'
        };
      });
      return it("should include another template into the current one", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual("<div>Hello World</div>");
      });
    });
    describe("a template that includes itself", function() {
      beforeEach(function() {
        var template;
        template = '<ul><pop:files><pop:dir><pop:include template="listing" /></pop:dir><pop:file><li><pop:name/></li></pop:file></pop:files></ul>';
        this.read = function(name) {
          if (name === 'listing') {
            return template;
          } else {
            return null;
          }
        };
        return this.content = {
          files: [
            {
              file: true,
              name: "test.txt",
              dir: false
            }, {
              dir: true,
              files: [
                {
                  file: true,
                  dir: false,
                  name: "/a/test.txt"
                }
              ]
            }
          ]
        };
      });
      return it("should not go into an endless loop :P", function() {
        return expect(new pop.Template({
          name: 'listing',
          read: this.read
        }).render(this.content).trim()).toEqual("<ul><li>test.txt</li><ul><li>/a/test.txt</li></ul></ul>");
      });
    });
    describe("a template that includes itself and recurses several times", function() {
      beforeEach(function() {
        var template;
        template = '<ul><pop:files><pop:dir><pop:include template="listing" /></pop:dir><pop:file><li><pop:name/> - <pop:global /></li></pop:file></pop:files></ul>';
        this.read = function(name) {
          if (name === 'listing') {
            return template;
          } else {
            return null;
          }
        };
        return this.content = {
          global: function() {
            return "I am global!";
          },
          files: [
            {
              file: true,
              name: "test.txt",
              dir: false
            }, {
              dir: true,
              files: [
                {
                  file: true,
                  dir: false,
                  name: "/a/test.txt"
                }, {
                  dir: true,
                  file: false,
                  files: [
                    {
                      file: true,
                      dir: false,
                      name: "/a/b/test.txt"
                    }
                  ]
                }
              ]
            }
          ]
        };
      });
      return it("should have access to the global scope", function() {
        return expect(new pop.Template({
          name: 'listing',
          read: this.read
        }).render(this.content).trim()).toEqual("<ul><li>test.txt - I am global!</li><ul><li>/a/test.txt - I am global!</li><ul><li>/a/b/test.txt - I am global!</li></ul></ul></ul>");
      });
    });
    describe("a template with a layout", function() {
      beforeEach(function() {
        var layout;
        layout = '<html><pop:region name="main" /></html>';
        this.template = '<pop:layout name="default" /><pop:block region="main"><h1><pop:title /></h1></pop:block>';
        this.content = {
          title: "Hello, World!"
        };
        return this.read = function(name) {
          if (name === 'layouts/default') {
            return layout;
          } else {
            return null;
          }
        };
      });
      return it("should replace the regions defined in the layout with the blocks defined in the template", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual("<html><h1>Hello, World!</h1></html>");
      });
    });
    describe("a template with layout and no block for a region", function() {
      beforeEach(function() {
        var layout;
        layout = '<html><pop:region name="main">Default content for main</pop:region></html>';
        this.template = '<pop:layout name="default" />';
        return this.read = function(name) {
          if (name === 'layouts/default') {
            return layout;
          } else {
            return null;
          }
        };
      });
      return it("should render the contents of the region defined in the layout", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render({}).trim()).toEqual("<html>Default content for main</html>");
      });
    });
    describe("a tag with a dynamic attribute", function() {
      beforeEach(function() {
        this.template = '<pop:output value="Hello, <pop:something />" />';
        return this.content = {
          output: function(options) {
            return options.value;
          },
          something: 'World!'
        };
      });
      return it("should get the attribute with the proper value", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content)).toEqual("Hello, World!");
      });
    });
    describe("an include tag with a dynamic template name", function() {
      beforeEach(function() {
        this.template = '<div><pop:include template="<pop:template />" /></div>';
        this.read = function(name) {
          if (name === 'hello-world') {
            return "Hello <pop:title />";
          } else {
            return null;
          }
        };
        return this.content = {
          title: 'World',
          template: 'hello-world'
        };
      });
      return it("should include the right template", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual("<div>Hello World</div>");
      });
    });
    describe("an include tag with a composed dynamic template name", function() {
      beforeEach(function() {
        this.template = '<pop:content><div><pop:include template="templates/<pop:template />" /></div></pop:content>';
        this.read = function(name) {
          if (name === 'templates/hello-world') {
            return "Hello <pop:content.title />";
          } else {
            return null;
          }
        };
        return this.content = {
          content: {
            title: 'World',
            template: 'hello-world'
          }
        };
      });
      return it("should include the right template", function() {
        return expect(new pop.Template({
          template: this.template,
          read: this.read
        }).render(this.content).trim()).toEqual("<div>Hello World</div>");
      });
    });
    describe("when compiling a template", function() {
      describe("with a missing closing tag", function() {
        beforeEach(function() {
          return this.template = "Something\n<pop:opentag>\nAnd something more";
        });
        return it("should raise an informative exception", function() {
          var test;
          test = this;
          return expect(function() {
            return new pop.Template({
              template: test.template
            }).compile();
          }).toThrow(pop.TemplateError);
        });
      });
      describe("with a malformed tag", function() {
        beforeEach(function() {
          return this.template = 'Something <pop:badtag and someinth more';
        });
        return it("should raise an informative exception", function() {
          var test;
          test = this;
          return expect(function() {
            return new pop.Template({
              template: test.template
            }).compile();
          }).toThrow(pop.TemplateError);
        });
      });
      return describe("with an error in a layout", function() {
        beforeEach(function() {
          var layout;
          layout = '<html><pop:bad_tag <pop:region name="main" /></html>';
          this.template = '<pop:layout name="default" /><pop:block region="main"><h1><pop:title /></h1></pop:block>';
          this.content = {
            title: "Hello, World!"
          };
          return this.read = function(name) {
            if (name === 'layouts/default') {
              return layout;
            } else {
              return null;
            }
          };
        });
        return it("should replace the regions defined in the layout with the blocks defined in the template", function() {
          var test;
          test = this;
          return expect(function() {
            return new pop.Template({
              template: test.template,
              read: test.read
            }).compile();
          }).toThrow(pop.TemplateError);
        });
      });
    });
    describe("filters", function() {
      return describe("an uppercase filter", function() {
        beforeEach(function() {
          this.template = '<pop:title format="uppercase" />';
          this.content = {
            title: 'Hello, World!'
          };
          return this.filters = {
            format: function(value, options) {
              if (options.format === 'uppercase') {
                return value.toUpperCase();
              }
            }
          };
        });
        return it("should transform the value to uppercase", function() {
          return expect(new pop.Template({
            template: this.template,
            filters: this.filters
          }).render(this.content)).toEqual("HELLO, WORLD!");
        });
      });
    });
    describe("shortcuts", function() {
      describe("nesting with . for self closing tag", function() {
        beforeEach(function() {
          this.template = "<pop:content.title />";
          return this.content = {
            content: {
              title: "Hello"
            }
          };
        });
        return it("should repeat the enclosed tag and perform the substitution for each element", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("Hello");
        });
      });
      describe("nesting with . for non self closing tag", function() {
        beforeEach(function() {
          this.template = "<pop:content.features><strong><pop:price /></strong></pop:content.features>";
          return this.content = {
            content: {
              features: {
                price: "$100"
              }
            }
          };
        });
        return it("should repeat the enclosed tag and perform the substitution for each element", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("<strong>$100</strong>");
        });
      });
      return describe("several levels of nesting with . for self closing tag", function() {
        beforeEach(function() {
          this.template = "<pop:content.author.name />";
          return this.content = {
            content: {
              author: {
                name: "Mathias"
              }
            }
          };
        });
        return it("should repeat the enclosed tag and perform the substitution for each element", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("Mathias");
        });
      });
    });
    describe("html entities", function() {
      return describe("when a string includes html entities", function() {
        beforeEach(function() {
          this.template = "<pop:text />";
          return this.content = {
            text: 'A "text" with & and <something>'
          };
        });
        it("should escape them", function() {
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("A &quot;text&quot; with &amp; and &lt;something&gt;");
        });
        return it("should not escape them if the escaping is disabled", function() {
          this.template = "<pop:text escape='false' />";
          return expect(new pop.Template({
            template: this.template
          }).render(this.content)).toEqual("A \"text\" with & and <something>");
        });
      });
    });
    describe("handle 0 different from null", function() {
      beforeEach(function() {
        this.template = "<pop:number />";
        return this.content = {
          number: 0
        };
      });
      return it("should show the 0", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content)).toEqual("0");
      });
    });
    return describe("html comments", function() {
      beforeEach(function() {
        this.template = "<!-- <pop:number /> -->";
        return this.content = {
          number: 10
        };
      });
      it("should not process html comments", function() {
        return expect(new pop.Template({
          template: this.template
        }).render(this.content)).toEqual("<!-- <pop:number /> -->");
      });
      return it("should process conditional comments", function() {
        this.template = "<!--[if IE 6]> <pop:number /> <![endif]-->";
        return expect(new pop.Template({
          template: this.template
        }).render(this.content)).toEqual("<!--[if IE 6]> 10 <![endif]-->");
      });
    });
  });

}).call(this);
